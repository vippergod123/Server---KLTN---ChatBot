#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server-chatbot:server');
var http = require('http');
var socket = require('socket.io');
var format = require('string-format');
const handleConversationFirebase = require('../function/handleConversationFirebase');

format.extend(String.prototype,{});
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// Socket 

  var io = require('socket.io')(server);
  io.on('connection', (socket) => {

    console.log("1 connected - {0}".format(socket.id));

    
    handleConversationFirebase.createNewFirebaseConversation(socket.id)
          .then ( message => { 
              socket.on('chat message', (msg) => 
              {
                var history = new Array()
                var botMsg = {
                  sendAt: new Date(),
                  text: msg,
                  respondent: "bot"
                }
          
                var userMsg = {
                  sendAt: new Date(),
                  text: msg,
                  user: "Duy"
                }
                handleConversationFirebase.updateHistoryFirebaseConversation(userMsg,botMsg,socket.id)
                                .then( message => { 
                                    io.emit('chat message', msg);
                                })
                                .catch (err => { 
                                    console.log("Update firebase chat - {0}".format(err.msg));
                                })
              })
            })
            .catch (err => { 
              console.log("Create firebase chat - {0}".format(err.msg));
            })  

    socket.on('disconnect', () => {
      console.log('user disconnected');
    });

  });

//

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

